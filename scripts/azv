#!/usr/bin/env bash

# azv - Azure Key Vault Fuzzy Finder
# Search and browse Azure Key Vaults and their secrets with fuzzy finding
# Opens selected secrets directly in Azure Portal

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Check dependencies
check_dependencies() {
    local missing_deps=()
    
    command -v az >/dev/null 2>&1 || missing_deps+=("az")
    command -v fzf >/dev/null 2>&1 || missing_deps+=("fzf")
    command -v jq >/dev/null 2>&1 || missing_deps+=("jq")
    
    if [ ${#missing_deps[@]} -gt 0 ]; then
        echo -e "${RED}Error: Missing required dependencies:${NC}"
        printf '%s\n' "${missing_deps[@]}"
        echo -e "${YELLOW}Install them and try again.${NC}"
        exit 1
    fi
}

# Check Azure CLI login status
check_azure_login() {
    if ! az account show >/dev/null 2>&1; then
        echo -e "${RED}Error: Not logged in to Azure${NC}"
        echo -e "${YELLOW}Run 'az login' first${NC}"
        exit 1
    fi
}

# Get current subscription info
get_subscription_info() {
    local sub_info
    sub_info=$(az account show --query '[name, id]' -o tsv)
    echo -e "${CYAN}Current Azure Subscription: ${GREEN}$(echo "$sub_info" | cut -f1)${NC}"
    echo ""
}

# List all key vaults with fuzzy search
select_keyvault() {
    echo -e "${BLUE}Loading Key Vaults...${NC}"
    
    local keyvaults
    keyvaults=$(az keyvault list --query '[].{Name:name, ResourceGroup:resourceGroup, Location:location}' -o json 2>/dev/null)
    
    if [ "$(echo "$keyvaults" | jq '. | length')" -eq 0 ]; then
        echo -e "${YELLOW}No Key Vaults found in current subscription${NC}"
        exit 0
    fi
    
    # Format for fzf display and selection
    local selected
    selected=$(echo "$keyvaults" | jq -r '.[] | "\(.Name)|\(.ResourceGroup)|\(.Location)"' | \
        column -t -s '|' | \
        fzf --prompt="Select Key Vault > " \
            --header="NAME | RESOURCE GROUP | LOCATION" \
            --preview-window=hidden \
            --height=40% \
            --reverse)
    
    if [ -z "$selected" ]; then
        echo -e "${YELLOW}No Key Vault selected${NC}"
        exit 0
    fi
    
    # Extract vault name from selection
    echo "$selected" | awk '{print $1}'
}

# List secrets for selected vault with values
list_vault_secrets() {
    local vault_name="$1"
    echo -e "${BLUE}Loading secrets from ${GREEN}$vault_name${BLUE}...${NC}"
    
    # Get all secrets
    local secrets
    secrets=$(az keyvault secret list --vault-name "$vault_name" --query '[].{Name:name, Enabled:attributes.enabled, Created:attributes.created, Updated:attributes.updated}' -o json 2>/dev/null)
    
    if [ "$(echo "$secrets" | jq '. | length')" -eq 0 ]; then
        echo -e "${YELLOW}No secrets found in vault: $vault_name${NC}"
        exit 0
    fi
    
    # Create temporary file for secret details
    local temp_file
    temp_file=$(mktemp)
    
    # Fetch secret values and combine with metadata
    echo -e "${BLUE}Fetching secret values...${NC}"
    echo "$secrets" | jq -c '.[]' | while IFS= read -r secret; do
        local name enabled created updated
        name=$(echo "$secret" | jq -r '.Name')
        enabled=$(echo "$secret" | jq -r '.Enabled')
        created=$(echo "$secret" | jq -r '.Created' | cut -d'T' -f1)
        updated=$(echo "$secret" | jq -r '.Updated' | cut -d'T' -f1)
        
        # Try to get the secret value (may fail for some secrets due to permissions)
        local value
        value=$(az keyvault secret show --vault-name "$vault_name" --name "$name" --query 'value' -o tsv 2>/dev/null || echo "[Access Denied]")
        
        # Truncate value for display if too long
        local display_value="$value"
        if [ ${#display_value} -gt 50 ]; then
            display_value="${value:0:47}..."
        fi
        
        # Store in format: name|enabled|created|updated|value|display_value
        echo "$name|$enabled|$created|$updated|$value|$display_value" >> "$temp_file"
    done
    
    echo "$temp_file"
}

# Select secret with fuzzy search
select_secret() {
    local vault_name="$1"
    local secrets_file="$2"
    
    # Create formatted display for fzf
    local selected
    selected=$(awk -F'|' '{printf "%-40s %-8s %-50s %-12s %-12s\n", $1, $2, $6, $3, $4}' "$secrets_file" | \
        fzf --prompt="Select Secret (search by name or value) > " \
            --header="NAME | ENABLED | VALUE | CREATED | UPDATED" \
            --preview="echo 'Full Value:' && awk -F'|' -v name='{1}' '\$1 == name {print \$5}' '$secrets_file' | fold -w 80" \
            --preview-window=down:10:wrap \
            --height=80% \
            --reverse)
    
    if [ -z "$selected" ]; then
        echo ""
    else
        # Extract secret name from selection
        echo "$selected" | awk '{print $1}'
    fi
    
    # Clean up temp file
    rm -f "$secrets_file"
}

# Open secret in Azure Portal
open_in_portal() {
    local vault_name="$1"
    local secret_name="$2"
    
    # Get subscription ID
    local subscription_id
    subscription_id=$(az account show --query 'id' -o tsv)
    
    # Get vault resource ID
    local vault_resource
    vault_resource=$(az keyvault show --name "$vault_name" --query 'id' -o tsv)
    
    # Construct Azure Portal URL for the specific secret
    local portal_url="https://portal.azure.com/#@/resource${vault_resource}/secrets/${secret_name}/versions"
    
    echo -e "${GREEN}Opening secret '${secret_name}' in Azure Portal...${NC}"
    
    # Open URL based on OS
    if [[ "$OSTYPE" == "darwin"* ]]; then
        open "$portal_url"
    elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
        xdg-open "$portal_url"
    elif [[ "$OSTYPE" == "msys" ]] || [[ "$OSTYPE" == "cygwin" ]] || [[ "$OSTYPE" == "win32" ]]; then
        start "$portal_url"
    else
        echo -e "${YELLOW}Could not detect OS. Please open manually:${NC}"
        echo "$portal_url"
    fi
}

# Main function
main() {
    check_dependencies
    check_azure_login
    
    echo -e "${CYAN}Azure Key Vault Fuzzy Finder (azv)${NC}"
    echo "======================================="
    get_subscription_info
    
    # Select Key Vault
    local vault_name
    vault_name=$(select_keyvault)
    
    if [ -z "$vault_name" ]; then
        exit 0
    fi
    
    echo -e "${GREEN}Selected Key Vault: $vault_name${NC}"
    echo ""
    
    # List and select secret
    local secrets_file
    secrets_file=$(list_vault_secrets "$vault_name")
    
    local secret_name
    secret_name=$(select_secret "$vault_name" "$secrets_file")
    
    if [ -z "$secret_name" ]; then
        echo -e "${YELLOW}No secret selected${NC}"
        exit 0
    fi
    
    # Open in portal
    open_in_portal "$vault_name" "$secret_name"
}

# Run main function
main "$@"