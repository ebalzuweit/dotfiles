#!/usr/bin/env zsh
# Datadog Functions
# Functions for interacting with Datadog logs and services

# Lazy load guard
[[ -n "${_DATADOG_LOADED}" ]] && return
_DATADOG_LOADED=1

# Configuration file location
DATADOG_CONFIG_FILE="${HOME}/.config/datadog/config"

# Helper function to load configuration
_load_datadog_config() {
    if [[ -f "$DATADOG_CONFIG_FILE" ]]; then
        source "$DATADOG_CONFIG_FILE"
        return 0
    fi
    return 1
}

# Helper function to save configuration
_save_datadog_config() {
    # Create config directory if it doesn't exist
    mkdir -p "$(dirname "$DATADOG_CONFIG_FILE")"
    
    # Write config file with current values
    cat > "$DATADOG_CONFIG_FILE" << EOF
# Datadog Configuration
# Generated by ddc
DATADOG_API_KEY="${DATADOG_API_KEY}"
DATADOG_APP_KEY="${DATADOG_APP_KEY}"
DATADOG_BASE_URL="${DATADOG_BASE_URL}"
EOF
    
    echo "✅ Configuration saved to $DATADOG_CONFIG_FILE"
}

# Helper function to check Datadog API credentials
_check_datadog_credentials() {
    # Load config if not already loaded
    _load_datadog_config
    
    if [[ -z "$DATADOG_API_KEY" ]] || [[ -z "$DATADOG_APP_KEY" ]] || [[ -z "$DATADOG_BASE_URL" ]]; then
        echo "❌ Datadog API credentials not configured"
        echo ""
        echo "Please run 'ddc setup' to configure your Datadog credentials"
        return 1
    fi
    return 0
}

# Helper function to URL encode a string
_url_encode() {
    local string="${1}"
    echo "$string" | jq -sRr @uri
}

# Helper function to test Datadog connection
_test_datadog_connection() {
    local test_response
    test_response=$(curl -s -o /dev/null -w "%{http_code}" \
        -G "${DATADOG_BASE_URL}/api/v1/validate" \
        -H "DD-API-KEY: ${DATADOG_API_KEY}" \
        -H "DD-APPLICATION-KEY: ${DATADOG_APP_KEY}" 2>/dev/null)
    
    if [ "$test_response" = "200" ] || [ "$test_response" = "403" ]; then
        # 403 means auth worked but might lack specific permissions, which is ok
        return 0
    else
        return 1
    fi
}

# ddsl (Datadog Service Logs) - Browse Datadog service logs
ddsl() {
    # Load configuration
    _load_datadog_config
    
    # Check credentials first
    _check_datadog_credentials || return 1
    
    echo "Fetching services from Datadog logs (last 10 minutes)..."
    
    # Calculate timestamps (10 minutes ago and now)
    local now_ms=$(date +%s000)
    local ten_min_ago_ms=$((now_ms - 600000))
    
    # Query for unique services in the last 10 minutes
    # Using the logs aggregate API as per Datadog docs
    local api_response
    api_response=$(curl -s -X POST "${DATADOG_BASE_URL}/api/v2/logs/analytics/aggregate" \
        -H "Accept: application/json" \
        -H "DD-API-KEY: ${DATADOG_API_KEY}" \
        -H "DD-APPLICATION-KEY: ${DATADOG_APP_KEY}" \
        -H "Content-Type: application/json" \
        -d "{
            \"compute\": [{
                \"type\": \"count\",
                \"aggregation\": \"count\"
            }],
            \"filter\": {
                \"from\": \"${ten_min_ago_ms}\",
                \"to\": \"${now_ms}\",
                \"query\": \"*\"
            },
            \"group_by\": [{
                \"type\": \"facet\",
                \"facet\": \"service\",
                \"limit\": 1000,
                \"sort\": {
                    \"type\": \"measure\",
                    \"order\": \"desc\"
                }
            }]
        }" 2>/dev/null)
    
    # Debug: Check if we got a response
    if [ -z "$api_response" ]; then
        echo "❌ No response from Datadog API"
        echo "Please check your credentials and network connection"
        return 1
    fi
    
    # Check for API errors
    local error_message=$(echo "$api_response" | jq -r '.errors[]?' 2>/dev/null)
    if [ -n "$error_message" ]; then
        echo "❌ API Error: $error_message"
        return 1
    fi
    
    # Parse services from the response
    local services
    services=$(echo "$api_response" | jq -r '.data.buckets[]?.by.service // empty' 2>/dev/null | grep -v '^null$' | grep -v '^$' | sort -u)
    
    # If no services found with service facet, try with @service attribute
    if [ -z "$services" ]; then
        echo "No services found with 'service' facet, trying '@service' attribute..."
        
        api_response=$(curl -s -X POST "${DATADOG_BASE_URL}/api/v2/logs/analytics/aggregate" \
            -H "Accept: application/json" \
            -H "DD-API-KEY: ${DATADOG_API_KEY}" \
            -H "DD-APPLICATION-KEY: ${DATADOG_APP_KEY}" \
            -H "Content-Type: application/json" \
            -d "{
                \"compute\": [{
                    \"type\": \"count\"
                }],
                \"filter\": {
                    \"from\": \"${ten_min_ago_ms}\",
                    \"to\": \"${now_ms}\",
                    \"query\": \"*\"
                },
                \"group_by\": [{
                    \"type\": \"facet\",
                    \"facet\": \"@service\",
                    \"limit\": 1000
                }]
            }" 2>/dev/null)
        
        services=$(echo "$api_response" | jq -r '.data.buckets[]?.by["@service"] // empty' 2>/dev/null | grep -v '^null$' | grep -v '^$' | sort -u)
    fi
    
    # Check if any services were found
    if [ -z "$services" ]; then
        echo "No services found in the last 10 minutes."
        echo ""
        echo "Troubleshooting:"
        echo "1. Verify your API keys have log read permissions"
        echo "2. Check if there are logs in the last 10 minutes"
        echo "3. Verify the base URL is correct: ${DATADOG_BASE_URL}"
        echo ""
        echo "You can test your credentials at:"
        echo "${DATADOG_BASE_URL}/logs"
        return 1
    fi
    
    echo "Found $(echo "$services" | wc -l | tr -d ' ') services"
    echo ""
    
    # Interactive Service Selection with fzf
    local selected_service
    selected_service=$(echo "$services" | fzf \
        --prompt="Select a service > " \
        --height="50%" \
        --border \
        --header="Services with logs in the last 10 minutes")
    
    # Open in Datadog if service selected
    if [ -n "$selected_service" ]; then
        # Construct the Datadog logs explorer URL
        local query="service:${selected_service}"
        local encoded_query=$(_url_encode "$query")
        
        # Construct the full URL with time range
        local logs_url="${DATADOG_BASE_URL}/logs?query=${encoded_query}&from_ts=${ten_min_ago_ms}&to_ts=${now_ms}&live=true"
        
        echo ""
        echo "Opening Datadog logs for service: $selected_service"
        echo "URL: $logs_url"
        
        # Open in default browser
        open "$logs_url"
    else
        echo "No service selected."
    fi
}

# ddc view - Show current Datadog configuration
_ddc_view() {
    echo "Datadog Configuration:"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    
    # Load configuration
    _load_datadog_config
    
    if [[ -n "$DATADOG_API_KEY" ]]; then
        echo "✅ API Key: ****${DATADOG_API_KEY: -4}"
    else
        echo "❌ API Key: Not set"
    fi
    
    if [[ -n "$DATADOG_APP_KEY" ]]; then
        echo "✅ App Key: ****${DATADOG_APP_KEY: -4}"
    else
        echo "❌ App Key: Not set"
    fi
    
    if [[ -n "$DATADOG_BASE_URL" ]]; then
        echo "📍 Base URL: ${DATADOG_BASE_URL}"
    else
        echo "❌ Base URL: Not set"
    fi
    
    # Test connection if credentials are set
    if [[ -n "$DATADOG_API_KEY" ]] && [[ -n "$DATADOG_APP_KEY" ]] && [[ -n "$DATADOG_BASE_URL" ]]; then
        echo ""
        echo "Testing connection..."
        if _test_datadog_connection; then
            echo "✅ Connection: Valid"
        else
            echo "❌ Connection: Failed"
        fi
    fi
    
    echo ""
    if [[ ! -f "$DATADOG_CONFIG_FILE" ]]; then
        echo "Config file: Not found"
        echo ""
        echo "To configure, run: ddc setup"
    else
        echo "Config file: $DATADOG_CONFIG_FILE"
        echo ""
        echo "To update configuration, run: ddc update <field>"
        echo "Available fields: api_key, app_key, base_url"
    fi
}

# ddc setup - Initial setup wizard
_ddc_setup() {
    echo "Datadog Configuration Setup"
    echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
    echo ""
    
    echo "Enter your Datadog credentials:"
    echo ""
    
    # Prompt for API Key
    echo -n "API Key: "
    read -r DATADOG_API_KEY
    
    # Prompt for App Key
    echo -n "App Key: "
    read -r DATADOG_APP_KEY
    
    # Prompt for Base URL
    echo -n "Base URL (e.g., https://app.datadoghq.com): "
    read -r DATADOG_BASE_URL
    
    # Validate required fields
    if [[ -z "$DATADOG_API_KEY" ]] || [[ -z "$DATADOG_APP_KEY" ]] || [[ -z "$DATADOG_BASE_URL" ]]; then
        echo ""
        echo "❌ Error: All fields are required."
        return 1
    fi
    
    # Save configuration
    _save_datadog_config
    
    echo ""
    echo "Testing connection..."
    
    if _test_datadog_connection; then
        echo "✅ Successfully connected to Datadog!"
        echo ""
        echo "You can now use 'ddsl' to browse service logs"
    else
        echo "⚠️  Could not validate credentials"
        echo "Please verify your API keys at:"
        echo "${DATADOG_BASE_URL}/organization-settings/api-keys"
    fi
}

# ddc update - Update specific field
_ddc_update() {
    local field="$1"
    
    # Load existing config
    _load_datadog_config
    
    case "$field" in
        api_key|api-key|apikey)
            echo "Current API Key: ****${DATADOG_API_KEY: -4}"
            echo -n "New API Key: "
            read -r DATADOG_API_KEY
            _save_datadog_config
            ;;
        app_key|app-key|appkey)
            echo "Current App Key: ****${DATADOG_APP_KEY: -4}"
            echo -n "New App Key: "
            read -r DATADOG_APP_KEY
            _save_datadog_config
            ;;
        base_url|base-url|baseurl|url)
            echo "Current Base URL: ${DATADOG_BASE_URL}"
            echo -n "New Base URL: "
            read -r DATADOG_BASE_URL
            _save_datadog_config
            ;;
        *)
            echo "Unknown field: $field"
            echo "Available fields: api_key, app_key, base_url"
            return 1
            ;;
    esac
    
    echo ""
    echo "Testing connection..."
    if _test_datadog_connection; then
        echo "✅ Configuration updated and validated!"
    else
        echo "⚠️  Configuration updated but connection test failed"
    fi
}

# ddc help - Show help information
_ddc_help() {
    echo "Datadog Configuration (ddc) - Manage Datadog API credentials"
    echo ""
    echo "Usage:"
    echo "  ddc                     Show current configuration"
    echo "  ddc view                Show current configuration"
    echo "  ddc setup               Run initial setup wizard"
    echo "  ddc update <field>      Update specific configuration field"
    echo "  ddc help                Show this help message"
    echo ""
    echo "Available fields for update:"
    echo "  api_key    - Datadog API key"
    echo "  app_key    - Datadog Application key" 
    echo "  base_url   - Datadog instance URL"
    echo ""
    echo "Examples:"
    echo "  ddc                     # View current config"
    echo "  ddc setup               # Initial setup"
    echo "  ddc update api_key      # Update API key"
    echo ""
    echo "Related commands:"
    echo "  ddsl       - Browse Datadog service logs"
    echo ""
    echo "Authentication docs:"
    echo "  https://docs.datadoghq.com/api/latest/authentication/"
}

# ddc - Main Datadog configuration command
ddc() {
    local subcommand="${1:-view}"
    shift 2>/dev/null || true
    
    # If no config file exists and user runs 'ddc', prompt to setup
    if [[ "$subcommand" == "view" ]] && [[ ! -f "$DATADOG_CONFIG_FILE" ]]; then
        echo "No Datadog configuration found."
        echo ""
        echo "To get started, run: ddc setup"
        echo "For help, run: ddc help"
        return 0
    fi
    
    case "$subcommand" in
        view)
            _ddc_view
            ;;
        setup)
            _ddc_setup
            ;;
        update)
            if [[ -z "$1" ]]; then
                echo "Error: Please specify a field to update"
                echo "Usage: ddc update <field>"
                echo "Available fields: api_key, app_key, base_url"
                return 1
            fi
            _ddc_update "$1"
            ;;
        help|--help|-h)
            _ddc_help
            ;;
        *)
            echo "Unknown command: $subcommand"
            _ddc_help
            return 1
            ;;
    esac
}

# Backward compatibility alias
ddsl-config() {
    ddc view
}